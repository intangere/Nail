-Nail Abstract Syntax Tree generated by compiler/interpreter

;Example code

a = 1 <---Set variable a to 1
b = 2 <---Set variables b to 2
c := a + b <---Bind the value of a + b to c. This means if a or b is changed the value of c will also changes based on a and b. 
echo c <----Print c ----> Results in: 3
a = 2 <---Set variable a to 2
echo c <---Print c ---> Results in: 4

;AST pass 1

a EQUAL 1 
b EQUAL 2
c DEPENDS a b 
  BIND 
    EQUAL a ADD b
ECHO c 
a EQUAL 2
ECHO c

;AST pass 2 (simplifies the AST)
a EQUAL 1
b EQUAL 2
c DEPENDS a b 
c EQUAL
  a ADD b
ECHO c 
a EQUAL 2
c EQUAL 
  a ADD b
ECHO c

;How is this executed?
a EQUAL 1 <----- #1
b EQUAL 2 <------ #2
c DEPENDS a b <----- #3
c EQUAL <------ #5
  a ADD b <------ #4
ECHO c <----- #6
a EQUAL 2 <----- #7
c EQUAL <------ #9
  a ADD b <------ #8
ECHO c <------- #10

;The interpreter will stop there as all of the AST has been executed
;Now if we compile the code using the nail compiler we get intel syntax assembly machine code.

;Generated by the Nail Compiler
section .text
  global _start
section .bss
  agbgjhciga resb 255
  c resb 255
  abjeaefdea resb 255
section .data
  a dd 1
  b dd 2
_start:
  mov eax, [a]
  mov ebx, [b]
  add eax, ebx
  mov [agbgjhciga], eax
  mov eax, [agbgjhciga]
  mov [c], eax
  mov eax, [c]
  mov eax, 2
  mov [a], eax
  mov eax, [a]
  mov ebx, [b]
  add eax, ebx
  mov [abjeaefdea], eax
  mov eax, [abjeaefdea]
  mov [c], eax
  mov eax, [c]
  call quit
quit:
  mov ebx, 0
  mov eax, 1
  int 80h
  ret

;Now let's observe how a more complex program is parsed, interpreted, and/or compiled. 
;Example code
a = 1 + 10 / 5 - 3 + 8 * 2
b = 4
c = a + b - 7
echo c
d := c - b <---This operation only supports the use of variables because a integer doesn't change values :)
echo d

-Here is the nail AST for the program-
;Pass 1
a EQUAL 
  1 ADD 
    10 DIV 5
       MINUS 
         3 ADD 8 
           MUL 2
b EQUAL 4
c EQUAL a ADD b
  MINUS 7
ECHO c
d DEPENDS c b
  BIND
    EQUAL 
      c MINUS b
ECHO d

;Pass 2
a EQUAL 
  1 ADD 
    10 DIV 5
       MINUS 
         3 ADD 8 
           MUL 2
b EQUAL 4
c EQUAL a ADD b
  MINUS 7
ECHO c
d DEPENDS c b
d EQUAL c MINUS b
ECHO d

;How is this executed?

a EQUAL <----- #6
  1 ADD <----- #3
    10 DIV 5 <----- #1
      MINUS <----- #5
        3 ADD 8 <------ #4
          MUL 2 <----- #2
b EQUAL 4 <----- #7
c EQUAL <----- #10
  a ADD b <---- #8
    MINUS 7 <---- #9
ECHO c <---- #11
d DEPENDS c b <---- #12
d EQUAL <----- #14
  c MINUS b <---- #13
ECHO d <------ #15

;If interpreted that is executed like so ^
;Else intel syntax assembly machine code is produced by the compiler

